{"version":3,"sources":["webpack:///./node_modules/ionicons/dist/esm/ion-icon.entry.js"],"names":["validateContent","svgContent","div","document","createElement","innerHTML","i","childNodes","length","nodeName","toLowerCase","removeChild","svgElm","firstElementChild","svgClass","getAttribute","setAttribute","trim","isValid","elm","nodeType","attributes","val","value","indexOf","ioniconContent","Map","requests","getSvgContent","url","sanitize","req","get","fetch","set","Promise","resolve","then","rsp","ok","text","iconCss","Icon","hostRef","this","isVisible","mode","getIonMode","lazy","waitUntilVisible","el","loadIcon","io","disconnect","undefined","rootMargin","cb","window","IntersectionObserver","data","isIntersecting","observe","has","ariaLabel","ariaHidden","label","name","icon","ios","md","replace","flipRtl","role","class","Object","assign","createColorClasses","color","size","ownerDocument","dir","documentElement","style"],"mappings":"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","file":"js/chunk-2d0d5c33.ca42f20b.js","sourcesContent":["import { r as registerInstance, h, H as Host, a as getElement } from './index-1880c860.js';\nimport { i as isStr, g as getUrl, b as getName } from './utils-bc896e4b.js';\n\nconst validateContent = (svgContent) => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\nconst isValid = (elm) => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const val = elm.attributes[i].value;\n      if (isStr(val) && val.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst ioniconContent = new Map();\nconst requests = new Map();\nconst getSvgContent = (url, sanitize) => {\n  // see if we already have a request for this url\n  let req = requests.get(url);\n  if (!req) {\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n      // we don't already have a request\n      req = fetch(url).then((rsp) => {\n        if (rsp.ok) {\n          return rsp.text().then((svgContent) => {\n            if (svgContent && sanitize !== false) {\n              svgContent = validateContent(svgContent);\n            }\n            ioniconContent.set(url, svgContent || '');\n          });\n        }\n        ioniconContent.set(url, '');\n      });\n      // cache for the same requests\n      requests.set(url, req);\n    }\n    else {\n      // set to empty for ssr scenarios and resolve promise\n      ioniconContent.set(url, '');\n      return Promise.resolve();\n    }\n  }\n  return req;\n};\n\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:32px;stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}:host(.flip-rtl) .icon-inner{transform:scaleX(-1)}:host(.icon-small){font-size:18px !important}:host(.icon-large){font-size:32px !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\n\nconst Icon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.isVisible = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = getIonMode();\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n    /**\n     * When set to `false`, SVG content that is HTTP fetched will not be checked\n     * if the response SVG content has any `<script>` elements, or any attributes\n     * that start with `on`, such as `onclick`.\n     * @default true\n     */\n    this.sanitize = true;\n  }\n  connectedCallback() {\n    // purposely do not return the promise here because loading\n    // the svg file should not hold up loading the app\n    // only load the svg if it's visible\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  waitUntilVisible(el, rootMargin, cb) {\n    if ( this.lazy && typeof window !== 'undefined' && window.IntersectionObserver) {\n      const io = (this.io = new window.IntersectionObserver((data) => {\n        if (data[0].isIntersecting) {\n          io.disconnect();\n          this.io = undefined;\n          cb();\n        }\n      }, { rootMargin }));\n      io.observe(el);\n    }\n    else {\n      // browser doesn't support IntersectionObserver\n      // so just fallback to always show it\n      cb();\n    }\n  }\n  loadIcon() {\n    if ( this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (ioniconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = ioniconContent.get(url);\n        }\n        else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => (this.svgContent = ioniconContent.get(url)));\n        }\n      }\n    }\n    if (!this.ariaLabel && this.ariaHidden !== 'true') {\n      const label = getName(this.name, this.icon, this.mode, this.ios, this.md);\n      // user did not provide a label\n      // come up with the label based on the icon name\n      if (label) {\n        this.ariaLabel = label.replace(/\\-/g, ' ');\n      }\n    }\n  }\n  render() {\n    const mode = this.mode || 'md';\n    const flipRtl = this.flipRtl ||\n      (this.ariaLabel &&\n        (this.ariaLabel.indexOf('arrow') > -1 || this.ariaLabel.indexOf('chevron') > -1) &&\n        this.flipRtl !== false);\n    return (h(Host, { role: \"img\", class: Object.assign(Object.assign({ [mode]: true }, createColorClasses(this.color)), { [`icon-${this.size}`]: !!this.size, 'flip-rtl': !!flipRtl && this.el.ownerDocument.dir === 'rtl' }) },  this.svgContent ? (h(\"div\", { class: \"icon-inner\", innerHTML: this.svgContent })) : (h(\"div\", { class: \"icon-inner\" }))));\n  }\n  static get assetsDirs() { return [\"svg\"]; }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"name\": [\"loadIcon\"],\n    \"src\": [\"loadIcon\"],\n    \"icon\": [\"loadIcon\"]\n  }; }\n};\nconst getIonMode = () => ( typeof document !== 'undefined' && document.documentElement.getAttribute('mode')) || 'md';\nconst createColorClasses = (color) => {\n  return color\n    ? {\n      'ion-color': true,\n      [`ion-color-${color}`]: true,\n    }\n    : null;\n};\nIcon.style = iconCss;\n\nexport { Icon as ion_icon };\n"],"sourceRoot":""}